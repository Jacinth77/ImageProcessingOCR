{"id":"RobotFalconTemplate","robotType":"ROBOT","mainClass":"com.novayre.jidoka.robot.test.RobotFalconTemplate","actions":["start","convertPdfToImage","extractTextFromOCR","end"],"conditionalActions":[],"fieldLinks":[],"actionDetails":[{"id":"start","implementation":"/**\n\t * Initialize the modules\n\t * @throws IOException \n\t */\npublic void start() throws IOException {\n    server = JidokaFactory.getServer();\n    client = IClient.getInstance(this);\n    falcon = IFalcon.getInstance(this, client);\n    images = JidokaImageSupport.getInstance(this);\n    IFalconProcess falconProcess = falcon.getFalconProcess();\n    server.setNumberOfItems(1);\n    server.setCurrentItem(1, images.getTestPng().getDescription());\n}"},{"id":"convertPdfToImage","implementation":"/**\n\t * Search image.\n\t * @throws IOException \n\t * @throws AWTException \n\t */\npublic void convertPdfToImage() throws Exception {\n    Path screenshot = Paths.get(server.getCurrentDir(), \"Dutch.pdf\");\n    server.info(\"Path\" + screenshot);\n    //String sourceDir =\"C:\\\\Users\\\\prasanthraja.c\\\\Downloads\\\\screenshot.pdf\";\n    String sourceDir = screenshot.toString();\n    // converted images from pdf document are saved here\n    String destinationDir = \"C:\\\\Users\\\\prasanthraja.c\\\\Downloads\\\\Converted_PdfFiles_to_Image/\";\n    File sourceFile = new  File(sourceDir);\n    server.info(\"Passed sourceDir\");\n    File destinationFile = new  File(destinationDir);\n    if (!destinationFile.exists()) {\n        destinationFile.mkdir();\n        server.info(\"Folder Created -> \" + destinationFile.getAbsolutePath());\n    }\n    if (sourceFile.exists()) {\n        server.info(\"Images copied to Folder Location: \" + destinationFile.getAbsolutePath());\n        PDDocument document = PDDocument.load(sourceFile);\n        PDFRenderer pdfRenderer = new  PDFRenderer(document);\n        int numberOfPages = document.getNumberOfPages();\n        server.info(\"Total files to be converting -> \" + numberOfPages);\n        String fileName = sourceFile.getName().replace(\".pdf\", \"\");\n        String fileExtension = \"png\";\n        // use less dpi for to save more space in harddisk. For professional usage you can use more than 300dpi\n        int dpi = 300;\n        for (int i = 0; i < numberOfPages; ++i) {\n            File outPutFile = new  File(destinationDir + fileName + \"_\" + (i + 1) + \".\" + fileExtension);\n            BufferedImage bImage = pdfRenderer.renderImageWithDPI(i, dpi, ImageType.RGB);\n            ImageIO.write(bImage, fileExtension, outPutFile);\n        }\n        document.close();\n        server.info(\"Converted Images are saved at -> \" + destinationFile.getAbsolutePath());\n    } else {\n        server.info(sourceFile.getName() + \" File not exists\");\n    }\n}"},{"id":"extractTextFromOCR","implementation":"public void extractTextFromOCR() throws Exception {\n    String inputFile = \"C:\\\\Users\\\\prasanthraja.c\\\\Downloads\\\\Converted_PdfFiles_to_Image\\\\Dutch_1.png\";\n    Tesseract tesseract = new  Tesseract();\n    tesseract.setDatapath(\"D:\\\\IntelJWorkspace\\\\RPA Projects\\\\tessdata\");\n    //tesseract.setLanguage(\"nld\");\n    String ExtractedText = tesseract.doOCR(new  File(inputFile));\n    server.info(\"Text :\" + ExtractedText);\n}"},{"id":"end","implementation":"/**\n\t * End.\n\t */\npublic void end() {\n}"}],"conditionalActionDetails":[],"sdkMethods":[]}